{
  "_args": [
    [
      {
        "raw": "angular-ecmascript",
        "scope": null,
        "escapedName": "angular-ecmascript",
        "name": "angular-ecmascript",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/samuel/workspace/hemic"
    ]
  ],
  "_from": "angular-ecmascript@latest",
  "_id": "angular-ecmascript@0.0.3",
  "_inCache": true,
  "_location": "/angular-ecmascript",
  "_nodeVersion": "5.9.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/angular-ecmascript-0.0.3.tgz_1463149528036_0.6862407105509192"
  },
  "_npmUser": {
    "name": "dab0mb",
    "email": "emanor6@gmail.com"
  },
  "_npmVersion": "3.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular-ecmascript",
    "scope": null,
    "escapedName": "angular-ecmascript",
    "name": "angular-ecmascript",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/angular-ecmascript/-/angular-ecmascript-0.0.3.tgz",
  "_shasum": "6e5f3630a23937090621ee9670f1212a66d8f1cf",
  "_shrinkwrap": null,
  "_spec": "angular-ecmascript",
  "_where": "/home/samuel/workspace/hemic",
  "bugs": {
    "url": "https://github.com/DAB0mB/angular-ecmascript/issues"
  },
  "dependencies": {},
  "description": "Build an AngularJS app using ES6's class system",
  "devDependencies": {
    "angular": "^1.5.0",
    "babel-cli": "^6.8.0",
    "babel-core": "^6.7.6",
    "babel-loader": "^6.2.4",
    "babel-plugin-add-module-exports": "^0.1.2",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-0": "^6.5.0",
    "jasmine-core": "^2.4.0",
    "webpack": "^1.13.0"
  },
  "directories": {},
  "dist": {
    "shasum": "6e5f3630a23937090621ee9670f1212a66d8f1cf",
    "tarball": "https://registry.npmjs.org/angular-ecmascript/-/angular-ecmascript-0.0.3.tgz"
  },
  "gitHead": "a6bdf8f533f26a1224c602bfd96434a76b28699d",
  "homepage": "https://github.com/DAB0mB/angular-ecmascript#readme",
  "keywords": [
    "angular",
    "ecmascript",
    "angular-ecmascript"
  ],
  "maintainers": [
    {
      "name": "dab0mb",
      "email": "emanor6@gmail.com"
    }
  ],
  "name": "angular-ecmascript",
  "optionalDependencies": {},
  "peerDependencies": {
    "angular": "^1.5.0"
  },
  "readme": "# Angular-Ecmascript\n\n`angular-ecmascript` is a utility library which will help you write an [AngularJS](https://angularjs.org) app using `ES6`'s class system.\nAs for now there is no official way to do so, however using `ES6` syntax is recommended, hence this library was created.\n\nIn addition, `angular-ecmascript` provides us with some very handy features, like auto-injection without using any pre-processors like [ng-annotate](https://github.com/olov/ng-annotate). For more information about `angular-ecmascript`'s API and features please read the following [docs](#docs).\n\n## Docs\n\n`angular-ecmascript` provides us with some base `module-helpers` classes which we should inherit from while writing our helpers. These are the available helpers:\n\n- [Provider](#provider)\n- [Service](#service)\n- [Factory](#factory)\n- [Controller](#controller)\n- [Directive](#directive)\n- [Decorator](#decorator)\n- [Filter](#filter)\n- [Config](#config)\n- [Runner](#runner)\n\nEach helper can be defined with a static `$inject` property which will be responsible for dependencies injection, and a static `$name` property, which is responsible for specifying the helper's name and defaults to the class'es name.\n\n```js\nimport { Service, Controller } from 'angular-ecmascript/module-helpers';\n\nclass DateService extends Service {\n  static $name = '$date'\n\n  now() {\n    return new Date().getTime();\n  }\n}\n\nclass MyController extends Controller {\n  static $inject = ['$date']\n\n  constructor(...args) {\n    super(...args);\n\n    this.createdAt = this.$date.now();\n  }\n}\n```\n\nTo interface with these helpers we will need to use a `module-loader` provided by `angular-ecmascript`. Just create a new `AngularJS` module wrapped by the loader and use it like so:\n\n```js\n// libs\nimport Angular from 'angular';\nimport Loader from 'angular-ecmascript/module-loader';\n// module-helpers\nimport MyCtrl from './controllers/my.ctrl';\nimport MyDirective from './directives/my.directive';\nimport MyService from './services/my.service';\n\n// app\nApp = Angular.module('my-app', [\n  'module1',\n  'module2',\n  'module3'\n]);\n\n// loader\nnew Loader(App)\n  .load(MyCtrl)\n  .load(MyDirective)\n  .load(MyService);\n```\n\n- `Loader()` can take a module name as the first argument and an optional dependencies array if you'd like to load a module by name.\n- `Loader.load()` can take an array of several module-helpers instead of chaining them one-by-one.\n- `Loader.load()` can take a string as the first argument representing the provider type and its value as the second argument, just like the [$provide](https://docs.angularjs.org/api/auto/service/$provide) service.\n\n### Provider\n\nUsed to define a new [provider](https://docs.angularjs.org/guide/providers).\n\n```js\nimport { Provider } from 'angular-ecmascript/module-helpers';\n\nclass MomentProvider extends Provider {\n  static $name = '$now'\n\n  $get() {\n    return new Date().getTime();\n  }\n}\n```\n\n### Service\n\nUsed to define a new [service](https://docs.angularjs.org/guide/services).\n\n```js\nimport { Service } from 'angular-ecmascript/module-helpers';\n\nclass DateService extends Service {\n  static $name = '$date'\n\n  now() {\n    return new Date().getTime();\n  }\n}\n```\n\n### Factory\n\nUsed to define a new `factory`.\n\n- Note that the `create` method must be implemented, otherwise an error will be thrown during load time.\n\n```js\nimport { Factory } from 'angular-ecmascript/module-helpers';\n\nclass MomentFactory extends Factory {\n  static $name = 'now'\n\n  create() {\n    return new Date().getTime();\n  }\n}\n```\n\n### Controller\n\nUsed to define a new [controller](https://docs.angularjs.org/guide/controller).\n\n- `$scope` will be injected automatically so no need to specify it.\n- When using [angular-meteor](https://github.com/Urigo/angular-meteor) the controller will be set as the view model automatically.\n\n```js\nimport { Controller } from 'angular-ecmascript/module-helpers';\n\nclass MyController extends Controller {\n  constructor(...args) {\n    super(...args);\n\n    this.createdAt = new Date().getTime();\n  }\n\n  logCreationTime() {\n    console.log(`created at: ${this.createdAy}`);\n  }\n}\n```\n\n### Directive\n\nUsed to define a new [directive](https://docs.angularjs.org/guide/directive).\n\n```js\nimport { Directive } from 'angular-ecmascript/module-helpers';\n\nclass MyDirective extends Directive {\n  templateUrl: 'my-template.html'\n  restrict = 'E'\n  transclude = true\n  scope = {}\n\n  link(scope) {\n    scope.foo = 'foo';\n    scope.bar = 'bar';\n  }\n}\n```\n\n### Decorator\n\nUsed to define a new [decorator](https://docs.angularjs.org/guide/decorators).\n\n- `$delegate` will be injected automatically so no need to specify it.\n- Note that the `decorate` method must be implemented, otherwise an error will be thrown during load time.\n- No need to return the `$delegate` object, it should be handled automatically.\n\n```js\nimport { Decorator } from 'angular-ecmascript/module-helpers';\n\nclass MyDecorator extends Decorator {\n  static $name = 'myService'\n\n  helperFn() {\n    // an additional fn to add to the service\n  }\n\n  decorate() {\n    this.$delegate.aHelpfulAddition = this.helperFn;\n  }\n}\n```\n\n### Filter\n\nUsed to define a new [filter](https://docs.angularjs.org/guide/filter).\n\n- Note that the `filter` method must be implemented, otherwise an error will be thrown during load time.\n\n```js\nimport { Filter } from 'angular-ecmascript/module-helpers';\n\nclass MyFilter extends Filter {\n  filter(input = '', uppercase) {\n    let out = '';\n\n    for (let i = 0; i < input.length; i++) {\n      out = input.charAt(i) + out;\n    }\n\n    // conditional based on optional argument\n    if (uppercase) {\n      out = out.toUpperCase();\n    }\n\n    return out;\n  }\n}\n```\n\n### Config\n\nUsed to define a new `config`.\n\n- Note that the `configure` method must be implemented, otherwise an error will be thrown during load time.\n\n```js\nimport { Config } from 'angular-ecmascript/module-helpers';\n\nclass RoutesCfg extends Config {\n  static $inject = ['$routeProvider']\n\n  constructor(...args) {\n    super(...args);\n\n    this.fetchUser = ['http', this::this.fetchUser];\n  }\n\n  configure() {\n    this.$routeProvider\n      .when('/', {\n        template: '<home user=\"$resolve.user\"></home>',\n        resolve: {\n          user: this.fetchUser\n        }\n      });\n  }\n\n  fetchUser($http) {\n    return $http.get('...');\n  }\n}\n```\n\n### Runner\n\nUsed to define a new `run block`.\n\n- Note that the `run` method must be implemented, otherwise an error will be thrown during load time.\n\n```js\nimport { Runner } from 'angular-meteor/module-helpers';\n\nclass RoutesRunner extends Runner {\n  static $inject = ['$rootScope', '$state']\n\n  run() {\n    this.$rootScope.$on('$stateChangeError', (...args) => {\n      const [,,, err] = args;\n\n      if (err === 'AUTH_REQUIRED') {\n        this.$state.go('login');\n      }\n    });\n  }\n}\n```\n\n## Download\n\nThe source is available for download from [GitHub](http://github.com/DAB0mB/angular-ecmascript). Alternatively, you can install using Node Package Manager (`npm`):\n\n    npm install angular-ecmascript\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DAB0mB/angular-ecmascript.git"
  },
  "scripts": {
    "build": "babel src/ -d dist/ --source-maps",
    "build:watch": "babel src/ -d dist/ --source-maps --watch",
    "prepublish": "npm run build",
    "test": "xdg-open ./test/index.html",
    "test:build": "npm run build && webpack --config ./test/webpack.config.js",
    "test:build:watch": "npm run build:watch & webpack --config ./test/webpack.config.js --watch"
  },
  "version": "0.0.3"
}
